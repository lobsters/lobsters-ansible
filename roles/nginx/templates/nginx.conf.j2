user www-data;

worker_processes 1;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # "on" if nginx worker_processes > 1
}

pid        /var/run/nginx.pid;

http {
  include       /etc/nginx/mime.types;
  default_type application/octet-stream;

  # TODO: Handle logging a bit better, check with sysadms
  access_log /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log;

  # TODO: Doubcle check these 3 options
  sendfile on;
  tcp_nopush on;
  tcp_nodelay off;

  # we haven't checked to see if Rack::Deflate on the app server is
  # faster or not than doing compression via nginx.  It's easier
  # to configure it all in one place here for static files and also
  # to disable gzip for clients who don't get gzip/deflate right.
  # There are other gzip settings that may be needed used to deal with
  # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_disable "MSIE [1-6]\.";
  #gzip_types text/plain text/html text/xml text/css
  #           text/comma-separated-values
  #           text/javascript application/x-javascript
  #           application/atom+xml;

  upstream app_server {
    # TODO: Add support for web http workers
    server unix:{{ unicorn_socket_file }} fail_timeout=0;
  }

  server {
    # TODO: Add support for http2/https (check with alynpost for the later)
    listen 80 default deferred;
    # listen [::]:80 ipv6only=on; # deferred or accept_filter recommended

    # TODO: Add support for multi-sites
    server_name _;

    keepalive_timeout 65;

    root {{ lobsters_app_path }}/public;

    try_files $uri/index.html $uri.html $uri @app;

    location @app {
      # http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # TODO: Enabled if HTTPs is added
      # proxy_set_header X-Forwarded-Proto $scheme;

      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # set "proxy_buffering off" *only* for Rainbows! when doing
      # Comet/long-poll/streaming.  It's also safe to set if you're using
      # only serving fast clients with Unicorn + nginx, but not slow
      # clients.  You normally want nginx to buffer responses to slow
      # clients, even with Rails 3.1 streaming because otherwise a slow
      # client can become a bottleneck of Unicorn.
      #
      # The Rack application may also set "X-Accel-Buffering (yes|no)"
      # in the response headers do disable/enable buffering on a
      # per-response basis.
      # proxy_buffering off;

      proxy_pass http://app_server;
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root {{ lobsters_app_path }}/public;
    }
  }
}
