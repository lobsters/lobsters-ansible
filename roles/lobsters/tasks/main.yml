- include_tasks: apt.yml

- name: populate service facts
  service_facts:

- name: groupadd lobsters
  tags: user
  group: name=lobsters gid=1024 state=present

- name: useradd lobsters
  tags: user
  user: >
    name=lobsters
    comment='lobste.rs'
    group=lobsters
    home='/srv/lobste.rs'
    shell='/bin/bash'
    state=present
    uid=1024

- name: mkdir ~lobste.rs/.%
  file: >
    state=directory
    path="/srv/lobste.rs/.{{ item.file }}"
    owner=lobsters
    group=lobsters
    mode="{{ item.mode }}"
  with_items:
  - { file: 'ssh', mode: '02700' }

- name: mkdir ~lobste.rs/%
  file: >
    state=directory
    path="/srv/lobste.rs/{{ item.file }}/"
    owner=lobsters
    group=lobsters
    mode="{{ item.mode }}"
  with_items:
    - { file: 'http', mode: '0755' }
    - { file: 'run',  mode: '0755' }
    - { file: 'log',  mode: '0755' }
    - { file: 'http/tmp',  mode: '0775' }
    - { file: 'http/tmp/pids',  mode: '0775' }
    - { file: 'http/tmp/cache',  mode: '0775' }

- name: cp % ~lobsters/.%
  copy: >
    src="{{ item.file }}"
    dest="/srv/lobste.rs/.{{ item.file }}"
    owner=lobsters
    group=lobsters
    mode={{ item.mode }}
  with_items:
    - { file: 'ssh/known_hosts', mode: '0600' }
    - { file: 'bashrc', mode: '0644' }

- name: git clone lobsters
  become: true
  become_user: lobsters
  register: clone
  git: >
    repo='https://github.com/lobsters/lobsters.git'
    dest='/srv/lobste.rs/http'
    force=yes


- name: check if bundler needs installing
  register: need_bundler
  shell: gem list --local bundler
  changed_when: "'bundler (' not in need_bundler"

- name: install bundler
  when: need_bundler.changed
  shell: gem install bundler

- name: bundle install
  become: true
  become_user: lobsters
  shell: bin/bundle install --path vendor/bundle
  register: bundler
  changed_when: "'Installing' in bundler or 'Updating' in bundler or 'upgrade' in bundler"
  args:
    chdir: "/srv/lobste.rs/http/"

- name: update config/database.yml
  register: database_config
  template:
    src: "database.yml.j2"
    dest: "/srv/lobste.rs/http/config/database.yml"
    force: no
    owner: lobsters
    group: lobsters

- name: migrate database
  when: clone.changed
  become: true
  become_user: lobsters
  environment:
    RAILS_ENV: "{{ env }}"
  command: chdir="/srv/lobste.rs/http" bin/bundle exec rails db:migrate

- name: recompile assets
  when: clone.changed or bundler.changed
  become: true
  become_user: lobsters
  environment:
    RAILS_ENV: "{{ env }}"
  command: chdir="/srv/lobste.rs/http" bin/bundle exec rails assets:precompile

- name: recursive chown as final first-run step before starting puma
  shell: | 
    chown -R lobsters.lobsters /srv/lobste.rs/http
    touch /tmp/.final_baseroot_chown
  creates: /tmp/.final_baseroot_chown

- name: restart puma
  when: (clone.changed or bundler.changed)
  systemd: >
    name="lobsters-puma"
    state=restarted

- name: cp 5m maintenance job
  template: >
    src="sbin/lobsters-cron.j2"
    dest="/usr/local/sbin/lobsters-cron"
    owner=root
    group=root
    mode='0755'

- name: add crontab entry for maintenance job
  tags: cron
  cron: >
    state=present
    name=lobsters-cron
    user=lobsters
    minute="*/5"
    job=/usr/local/sbin/lobsters-cron

- name: cp daily job
  template: >
    src="sbin/lobsters-daily.j2"
    dest="/usr/local/sbin/lobsters-daily"
    owner=root
    group=root
    mode='0755'

- name: add crontab entry for daily job
  tags: cron
  cron: >
    state=present
    name=lobsters-daily
    user=lobsters
    minute="0"
    hour="0"
    job=/usr/local/sbin/lobsters-daily

- name: page expiration cron job
  tags: cron
  cron: >
    state=present
    name=lobsters-page-expiration
    user=lobsters
    minute="*"
    job=/srv/lobste.rs/http/script/expire_page_cache
